import os
import asyncio
from dotenv import load_dotenv
from telethon import TelegramClient
from telethon.tl.types import MessageService
import pandas as pd

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
load_dotenv()

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
api_id = int(os.getenv('TG_API_ID'))
api_hash = os.getenv('TG_API_HASH')
session_name = os.getenv('TG_SESSION', 'tg_session')
channel_id = int(os.getenv('CHANNEL_ID'))

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Telethon-–∫–ª–∏–µ–Ω—Ç–∞
client = TelegramClient(session_name, api_id, api_hash)


async def fetch_last_posts(limit=200):
    await client.start()
    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

    try:
        channel = await client.get_entity(channel_id)
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É: {e}")
        return pd.DataFrame()

    messages = []
    async for msg in client.iter_messages(channel, limit=limit, reverse=False):  # –û—Ç –Ω–æ–≤–æ–≥–æ –∫ —Å—Ç–∞—Ä–æ–º—É
        if isinstance(msg, MessageService) or not msg.date:
            continue

        data = {
            'date': msg.date,
            'message_id': msg.id,
            'text': msg.text[:1000] if msg.text else '',
            'views': getattr(msg, 'views', 0),
            'forwards': getattr(msg, 'forwards', 0),
            'comments': msg.replies.replies if msg.replies else 0,
            'reactions': {r.reaction.emoticon: r.count for r in msg.reactions.results} if msg.reactions else {},
            'reactions_count': sum(r.count for r in msg.reactions.results) if msg.reactions else 0,
            'post_link': f"https://t.me/c/{str(channel_id).replace('-100', '')}/{msg.id}"
        }
        messages.append(data)

    df = pd.DataFrame(messages)
    df['date'] = pd.to_datetime(df['date'])  # –Ø–≤–Ω–æ –∑–∞–¥–∞—ë–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
    return df


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    new_posts_df = await fetch_last_posts()

    if new_posts_df.empty:
        print("‚ö†Ô∏è –ù–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç")
        return

    # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª
    try:
        existing_posts_df = pd.read_csv('telegram_posts_history.csv', parse_dates=['date'])
    except FileNotFoundError:
        print("‚ö†Ô∏è –§–∞–π–ª telegram_posts_history.csv –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        existing_posts_df = pd.DataFrame()

    if not existing_posts_df.empty:
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ message_id
        merged_df = pd.concat([
            existing_posts_df.set_index('message_id'),
            new_posts_df.set_index('message_id')
        ])
        merged_df = merged_df[~merged_df.index.duplicated(keep='last')].reset_index()
        print("üîÑ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

        # –ü–æ–¥—Å—á—ë—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        old_ids = set(existing_posts_df['message_id'])
        new_ids = set(new_posts_df['message_id'])
        new_count = len(new_ids - old_ids)
        updated_count = len(new_ids & old_ids)
        print(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤: {new_count}")
        print(f"‚ôªÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö: {updated_count}")
    else:
        merged_df = new_posts_df
        print("üì• –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –¥–∞—Ç–∞—Ñ—Ä–µ–π–º —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –ø–æ—Å—Ç–∞–º–∏")

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
    merged_df = merged_df.sort_values('date', ascending=False)

    # (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏ –ø–æ —Å—Å—ã–ª–∫–µ, –µ—Å–ª–∏ —Ç–∞–∫–æ–µ –≤–æ–∑–º–æ–∂–Ω–æ
    merged_df = merged_df.drop_duplicates(subset='post_link', keep='first')

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    merged_df.to_csv('telegram_posts_history.csv', index=False)
    print("‚úÖ –§–∞–π–ª telegram_posts_history.csv —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
    print(merged_df.head())


# –ó–∞–ø—É—Å–∫ –∫–æ–¥–∞
with client:
    client.loop.run_until_complete(main())
